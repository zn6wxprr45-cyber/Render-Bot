# -*- coding: utf-8 -*-
"""–¢–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç "–û–Ω–ª–∞–π–Ω-–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞"

–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞ "–û–Ω–ª–∞–π–Ω-–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞"
–¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ—Å—Ç–∏–Ω—Å—É–ª—å—Ç–Ω—ã–º–∏ —Ç–∞–ª–∞–º–∏—á–µ—Å–∫–∏–º —Å–∏–Ω–¥—Ä–æ–º–æ–º.

–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç python-telegram-bot –∏ Firebase Firestore.
"""

import logging
import os
import json
import datetime
import asyncio
import firebase_admin
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from firebase_admin import credentials, firestore, auth

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Firebase –∏ –¢–æ–∫–µ–Ω–∞ ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º os.getenv –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render.

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç—å hostname Render –∫–∞–∫ ID, –µ—Å–ª–∏ APP_ID –Ω–µ –∑–∞–¥–∞–Ω
appId = os.getenv('RENDER_EXTERNAL_HOSTNAME', 'default-app-id').split('.')[0]

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Firebase (JSON —Å—Ç—Ä–æ–∫–∞)
firebase_config_str = os.getenv('FIREBASE_CONFIG_JSON')

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ URL Webhook
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_HOSTNAME")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger("telegram_bot")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_TOKEN or not WEBHOOK_URL:
    logger.error("TELEGRAM_TOKEN –∏–ª–∏ RENDER_EXTERNAL_HOSTNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–±–æ—è, –Ω–æ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    TELEGRAM_TOKEN = TELEGRAM_TOKEN or "FAKE_TOKEN"
    WEBHOOK_URL = WEBHOOK_URL or "FAKE_URL"


# --- Firebase Initialization (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è Admin SDK) ---
try:
    if firebase_config_str:
        # –°–æ–∑–¥–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON-–æ–±—ä–µ–∫—Ç–∞
        firebase_config = json.loads(firebase_config_str)
        cred = credentials.Certificate(firebase_config)
        firebase_admin.initialize_app(cred, {
            'projectId': firebase_config['project_id']
        })
        logger.info("Firebase Admin SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        logger.info(f"Firebase App ID: {appId}")
    else:
        logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è FIREBASE_CONFIG_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Firestore (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î)
db = None
try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Firebase Admin SDK
    if firebase_admin._DEFAULT_APP:
        db = firestore.client()
        logger.info("–ö–ª–∏–µ–Ω—Ç Firestore —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
    else:
        logger.warning("Firebase Admin SDK –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ö–ª–∏–µ–Ω—Ç Firestore –Ω–µ —Å–æ–∑–¥–∞–Ω.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Firestore: {e}")


# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –ª–æ–≥–∏–∫–∏ ---
# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
SURVEY_BTN = "üìä –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
ILLNESS_BTN = "üß† –û –±–æ–ª–µ–∑–Ω–∏ (—Ç–∞–ª–∞–º–∏—á–µ—Å–∫–∏–π —Å–∏–Ω–¥—Ä–æ–º)"
INFO_BTN = "üè• –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"
EMERGENCY_BTN = "üÜò –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å"

# –ö–Ω–æ–ø–∫–∏ –≤ –¥–∏–∞–ª–æ–≥–µ
CANCEL_BTN = "‚ùå –û—Ç–º–µ–Ω–∞"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
Q1_PAIN = 1
Q2_SLEEP = 2
Q3_MEDICATION = 3
Q4_SIDE_EFFECTS = 4
Q5_COMMENTS = 5
FEEDBACK_TEXT = 6


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Firestore ---

def get_patient_doc_ref(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Firestore."""
    if db:
        # /artifacts/{appId}/users/{userId}/patient_data/{docId}
        return db.collection("artifacts").document(appId).collection("users").document(str(user_id)).collection("patient_data").document("profile")
    return None

def get_survey_collection_ref(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∞–Ω–∫–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞."""
    if db:
        # /artifacts/{appId}/users/{userId}/survey_entries
        return db.collection("artifacts").document(appId).collection("users").document(str(user_id)).collection("survey_entries")
    return None

async def save_survey_data(user_id: int, survey_data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ Firestore."""
    if not db:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Firestore –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.")
        return False
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        survey_data['timestamp'] = firestore.SERVER_TIMESTAMP
        survey_data['date'] = datetime.datetime.now(datetime.timezone.utc).strftime("%Y-%m-%d")

        collection_ref = get_survey_collection_ref(user_id)
        if collection_ref:
            # Firestore –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–≤–æ–∏—Ç ID –¥–æ–∫—É–º–µ–Ω—Ç—É
            await collection_ref.add(survey_data)
            logger.info(f"–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            return True
        return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –¥–ª—è {user_id}: {e}")
        return False


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –º–µ–Ω—é ---

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard = [
        [KeyboardButton(SURVEY_BTN)],
        [KeyboardButton(ILLNESS_BTN), KeyboardButton(INFO_BTN)],
        [KeyboardButton(EMERGENCY_BTN)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª —á–∞—Ç.")
    
    welcome_message = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.full_name}!\n\n"
        "–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–µ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ—Å—Ç–∏–Ω—Å—É–ª—å—Ç–Ω—ã–º —Ç–∞–ª–∞–º–∏—á–µ—Å–∫–∏–º —Å–∏–Ω–¥—Ä–æ–º–æ–º.\n\n"
        "**–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
        "1. **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–Ω–∫–µ—Ç–∞:** –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –ª–µ—á–µ–Ω–∏–∏.\n"
        "2. **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:** –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–∏, —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã."
    )
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=get_main_menu_keyboard(),
        parse_mode='Markdown'
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ ---

async def show_illness_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∏–Ω—Å—É–ª—å—Ç–Ω–æ–º —Ç–∞–ª–∞–º–∏—á–µ—Å–∫–æ–º —Å–∏–Ω–¥—Ä–æ–º–µ."""
    info_text = (
        "üß† **–û –ø–æ—Å—Ç–∏–Ω—Å—É–ª—å—Ç–Ω–æ–º —Ç–∞–ª–∞–º–∏—á–µ—Å–∫–æ–º —Å–∏–Ω–¥—Ä–æ–º–µ**\n\n"
        "–≠—Ç–æ –Ω–µ–≤—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–µ, –≤–æ–∑–Ω–∏–∫–∞—é—â–µ–µ –ø–æ—Å–ª–µ –∏–Ω—Å—É–ª—å—Ç–∞, –ø–æ—Ä–∞–∑–∏–≤—à–µ–≥–æ —Ç–∞–ª–∞–º—É—Å. "
        "–ì–ª–∞–≤–Ω—ã–π —Å–∏–º–ø—Ç–æ–º ‚Äî —ç—Ç–æ **—Ç–∞–ª–∞–º–∏—á–µ—Å–∫–∞—è –±–æ–ª—å**, –∫–æ—Ç–æ—Ä–∞—è —á–∞—Å—Ç–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –∂–≥—É—á–∞—è, "
        "–ø—Ä–æ–Ω–∏–∑—ã–≤–∞—é—â–∞—è –∏–ª–∏ –¥–∞–≤—è—â–∞—è, –∏ –ø–ª–æ—Ö–æ –ø–æ–¥–¥–∞–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º –∞–Ω–∞–ª—å–≥–µ—Ç–∏–∫–∞–º.\n\n"
        "**–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**\n"
        "- **–°–∏–º–ø—Ç–æ–º—ã:** –•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –±–æ–ª—å, –∏–∑–º–µ–Ω–µ–Ω–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∏–Ω–æ–≥–¥–∞ –Ω–µ–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è.\n"
        "- **–õ–µ—á–µ–Ω–∏–µ:** –¢—Ä–µ–±—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞, —á–∞—Å—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç—ã –∏ –ø—Ä–æ—Ç–∏–≤–æ—Å—É–¥–æ—Ä–æ–∂–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã "
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, –ì–∞–±–∞–ø–µ–Ω—Ç–∏–Ω, –ü—Ä–µ–≥–∞–±–∞–ª–∏–Ω) –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –±–æ–ª–∏. –í–∞–∂–µ–Ω —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª–µ—á–µ–Ω–∏—è.\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –ª–µ—á–∞—â–µ–º—É –≤—Ä–∞—á—É."
    )
    await update.message.reply_text(info_text, parse_mode='Markdown')

async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã, —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã."""
    info_text = (
        "üè• **–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ–Ω–ª–∞–π–Ω-–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏**\n\n"
        "**–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:** –ï–∂–µ–¥–Ω–µ–≤–Ω–æ, —Å **8:00 –¥–æ 20:00 (–ú–°–ö)**.\n\n"
        "**–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:**\n"
        "–î–ª—è –Ω–µ—ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /feedback –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É: `support@example.com`.\n\n"
        "**–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:** +7 (495) 123-45-67 (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)\n\n"
        "**–í–ù–ò–ú–ê–ù–ò–ï:** –≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. "
        "–í—Å–µ–≥–¥–∞ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤–∞—à–µ–≥–æ –ª–µ—á–∞—â–µ–≥–æ –≤—Ä–∞—á–∞."
    )
    await update.message.reply_text(info_text, parse_mode='Markdown')

async def show_emergency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —Å—Ä–æ—á–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏."""
    info_text = (
        "üÜò **–°—Ä–æ—á–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å**\n\n"
        "**–ï—Å–ª–∏ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ:**\n"
        "1. –í–Ω–µ–∑–∞–ø–Ω–æ–µ —É—Ö—É–¥—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n"
        "2. –û—Å—Ç—Ä–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ –±–æ–ª–∏, –Ω–µ –∫—É–ø–∏—Ä—É–µ–º–æ–µ –æ–±—ã—á–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏.\n"
        "3. –°–∏–º–ø—Ç–æ–º—ã –Ω–æ–≤–æ–≥–æ –∏–Ω—Å—É–ª—å—Ç–∞ (–≤–Ω–µ–∑–∞–ø–Ω–∞—è —Å–ª–∞–±–æ—Å—Ç—å, –æ–Ω–µ–º–µ–Ω–∏–µ, –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏).\n\n"
        "**–ù–ï–ú–ï–î–õ–ï–ù–ù–û –∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±:**\n"
        "- **103** (–°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å)\n"
        "- **112** (–ï–¥–∏–Ω—ã–π –Ω–æ–º–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±)\n\n"
        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏ –Ω–µ –æ–∫–∞–∑—ã–≤–∞—é—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –ø–æ–º–æ—â—å. –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ ‚Äî –≤–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!"
    )
    await update.message.reply_text(info_text, parse_mode='Markdown')


# --- –î–∏–∞–ª–æ–≥ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ---

async def start_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. \n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùå –û—Ç–º–µ–Ω–∞'.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(CANCEL_BTN)]], resize_keyboard=True, one_time_keyboard=True)
    )
    return FEEDBACK_TEXT

async def receive_feedback_and_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    user_id = update.effective_user.id
    feedback_text = update.message.text
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    # –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç {user_id}: {feedback_text[:50]}...")
    
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ.",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END

# --- –î–∏–∞–ª–æ–≥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã (Survey) ---

async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∞–Ω–∫–µ—Ç—ã."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã
    context.user_data['survey'] = {}
    
    keyboard = [[KeyboardButton("1"), KeyboardButton("5"), KeyboardButton("10")], [KeyboardButton(CANCEL_BTN)]]
    await update.message.reply_text(
        "**–®–ê–ì 1/5: –û—Ü–µ–Ω–∫–∞ –±–æ–ª–∏**\n\n–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ç–∞–ª–∞–º–∏—á–µ—Å–∫–æ–π –±–æ–ª–∏ —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ –æ—Ç **0 (–Ω–µ—Ç –±–æ–ª–∏)** –¥–æ **10 (—Å–∞–º–∞—è —Å–∏–ª—å–Ω–∞—è –±–æ–ª—å)**. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode='Markdown'
    )
    return Q1_PAIN

async def q1_pain(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –±–æ–ª–∏."""
    try:
        pain_score = int(update.message.text.strip())
        if not 0 <= pain_score <= 10:
            raise ValueError
        
        context.user_data['survey']['pain_score'] = pain_score
        
        keyboard = [[KeyboardButton("–û—Ç–ª–∏—á–Ω–æ"), KeyboardButton("–ü–ª–æ—Ö–æ"), KeyboardButton("–ö–∞–∫ –æ–±—ã—á–Ω–æ")], [KeyboardButton(CANCEL_BTN)]]
        await update.message.reply_text(
            f"–ü—Ä–∏–Ω—è—Ç–æ, –æ—Ü–µ–Ω–∫–∞ –±–æ–ª–∏: **{pain_score}**.\n\n**–®–ê–ì 2/5: –°–æ–Ω**\n\n–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–≥–æ —Å–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ—á—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –æ–±—â–∞—è –±–æ–¥—Ä–æ—Å—Ç—å). –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ.",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True),
            parse_mode='Markdown'
        )
        return Q2_SLEEP
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10 –∏–ª–∏ /cancel."
        )
        return Q1_PAIN

async def q2_sleep(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞."""
    context.user_data['survey']['sleep_description'] = update.message.text.strip()
    
    keyboard = [[KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"), KeyboardButton("–ò–∑–º–µ–Ω–∏–ª –¥–æ–∑—É")], [KeyboardButton(CANCEL_BTN)]]
    await update.message.reply_text(
        "–ü—Ä–∏–Ω—è—Ç–æ.\n\n**–®–ê–ì 3/5: –õ–µ—á–µ–Ω–∏–µ**\n\n–ü—Ä–∏–Ω–∏–º–∞–ª–∏ –ª–∏ –≤—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç—ã, –ø—Ä–æ—Ç–∏–≤–æ—Å—É–¥–æ—Ä–æ–∂–Ω—ã–µ) —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é –≤—Ä–∞—á–∞?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode='Markdown'
    )
    return Q3_MEDICATION

async def q3_medication(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–µ–º–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤."""
    context.user_data['survey']['medication_compliance'] = update.message.text.strip()
    
    keyboard = [[KeyboardButton("–ù–µ—Ç"), KeyboardButton("–î–∞, —Å–ª–∞–±—ã–µ"), KeyboardButton("–î–∞, —Å–∏–ª—å–Ω—ã–µ")], [KeyboardButton(CANCEL_BTN)]]
    await update.message.reply_text(
        "–ü—Ä–∏–Ω—è—Ç–æ.\n\n**–®–ê–ì 4/5: –ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã**\n\n–û—â—É—â–∞–ª–∏ –ª–∏ –≤—ã —Å–µ–≥–æ–¥–Ω—è –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–≥–æ –ª–µ—á–µ–Ω–∏—è (—Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å, —Ç–æ—à–Ω–æ—Ç–∞, –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ)? –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode='Markdown'
    )
    return Q4_SIDE_EFFECTS

async def q4_side_effects(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∞—Ö."""
    context.user_data['survey']['side_effects'] = update.message.text.strip()
    
    keyboard = [[KeyboardButton("–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"), KeyboardButton(CANCEL_BTN)]]
    await update.message.reply_text(
        "–ü—Ä–∏–Ω—è—Ç–æ.\n\n**–®–ê–ì 5/5: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏**\n\n–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–±—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–æ–±—â–∏—Ç—å –≤—Ä–∞—á—É?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode='Markdown'
    )
    return Q5_COMMENTS

async def q5_comments_and_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—é –∞–Ω–∫–µ—Ç—É."""
    context.user_data['survey']['comments'] = update.message.text.strip()
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∞–Ω–∫–µ—Ç—É
    final_survey_data = context.user_data['survey']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await save_survey_data(user_id, final_survey_data)
    
    if success:
        message = (
            "‚úÖ **–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!**\n\n"
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑. –í–∞—à –≤—Ä–∞—á —É–≤–∏–¥–∏—Ç:\n"
            f"- –û—Ü–µ–Ω–∫–∞ –±–æ–ª–∏: **{final_survey_data.get('pain_score', 'N/A')} / 10**\n"
            "- –ü—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤: {final_survey_data.get('medication_compliance', 'N/A')}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—Å—Ç—å. –ú—ã —Å –≤–∞–º–∏ –Ω–∞ —Å–≤—è–∑–∏."
        )
    else:
        message = (
            "‚ùå **–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!**\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

    await update.message.reply_text(
        message,
        reply_markup=get_main_menu_keyboard(),
        parse_mode='Markdown'
    )
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return ConversationHandler.END


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã ---

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel."""
    if 'survey' in context.user_data:
        context.user_data.pop('survey')
    
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard()
    )
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ConversationHandler.END –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    return ConversationHandler.END

async def cancel_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '‚ùå –û—Ç–º–µ–Ω–∞'."""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MessageHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    # –í ConversationHandler.fallbacks –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å MessageHandler, –Ω–æ
    # –ø–æ—Å–∫–æ–ª—å–∫—É —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∑–¥–µ—Å—å, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º cancel
    return await cancel(update, context)


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞ ---

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Webhook."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram Bot...")
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è fallbacks (–æ—Ç–º–µ–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ)
    # –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç NameError
    cancel_command_handler = CommandHandler("cancel", cancel)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∞" (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è fallbacks)
    cancel_message_handler = MessageHandler(filters.Regex(f"^{CANCEL_BTN}$"), cancel_button_handler)
    
    # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –∞–Ω–∫–µ—Ç—ã
    survey_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(f"^{SURVEY_BTN}$"), start_survey)],
        states={
            Q1_PAIN: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{CANCEL_BTN}$"), q1_pain)],
            Q2_SLEEP: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{CANCEL_BTN}$"), q2_sleep)],
            Q3_MEDICATION: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{CANCEL_BTN}$"), q3_medication)],
            Q4_SIDE_EFFECTS: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{CANCEL_BTN}$"), q4_side_effects)],
            Q5_COMMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{CANCEL_BTN}$"), q5_comments_and_save)],
        },
        fallbacks=[cancel_command_handler, cancel_message_handler],
    )
    
    # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    feedback_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("feedback", start_feedback)],
        states={
            FEEDBACK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{CANCEL_BTN}$"), receive_feedback_and_save)],
        },
        fallbacks=[cancel_command_handler, cancel_message_handler],
    )
    
    # 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CommandHandler("start", start))
    application.add_handler(survey_conv_handler)
    application.add_handler(feedback_conv_handler)
    application.add_handler(MessageHandler(filters.Regex(f"^{ILLNESS_BTN}$"), show_illness_info))
    application.add_handler(MessageHandler(filters.Regex(f"^{INFO_BTN}$"), show_info))
    application.add_handler(MessageHandler(filters.Regex(f"^{EMERGENCY_BTN}$"), show_emergency))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç)
    async def other_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{SURVEY_BTN}|{ILLNESS_BTN}|{INFO_BTN}|{EMERGENCY_BTN}$"), other_text))
    
    logger.info("Application handlers set up successfully.")

    # 5. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Webhook (–¥–ª—è Render)
    port = int(os.environ.get("PORT", "8080")) # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è Render
    
    logger.info(f"–ó–∞–ø—É—Å–∫ Webhook –Ω–∞ –ø–æ—Ä—Ç—É {port} —Å URL: https://{WEBHOOK_URL}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook URL (–¥–ª—è Telegram)
    application.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path="",
        webhook_url=f"https://{WEBHOOK_URL}",
    )

if __name__ == '__main__':
    main()
