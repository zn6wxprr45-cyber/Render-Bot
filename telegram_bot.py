# -*- coding: utf-8 -*-
"""–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞ "–û–Ω–ª–∞–π–Ω-–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞"

–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç python-telegram-bot –∏ Firebase Firestore.
"""

import logging
import os
import json
import datetime
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler
)
import firebase_admin
from firebase_admin import credentials, firestore, auth

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–†–ï–î–´ (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ) ---
# –ß–∏—Ç–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "FAKE_TOKEN")
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
WEBHOOK_PORT = int(os.getenv("PORT", 10000))

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Firebase
APP_ID = os.getenv('APP_ID', 'default-app-id')
FIREBASE_CONFIG_JSON = os.getenv('FIREBASE_CONFIG_JSON')

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫ ---
(
    Q1_PAIN,
    Q2_SLEEP,
    Q3_MEDICATION,
    Q4_SIDE_EFFECTS,
    Q5_COMMENTS,
    Q6_SAVE
) = range(6)

SURVEY_BTN = "‚úÖ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ–ø—Ä–æ—Å–Ω–∏–∫"
ILLNESS_BTN = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω–¥—Ä–æ–º–µ"
INFO_BTN = "üßë‚Äç‚öïÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ —Å–≤—è–∑—å"
EMERGENCY_BTN = "üö® –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å"
CANCEL_BTN = "‚ùå –û—Ç–º–µ–Ω–∞"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase ---
db = None # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Firestore
firebase_initialized = False

def initialize_firebase():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Firebase Admin SDK –∏ –ø–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Firestore."""
    global db, firebase_initialized
    if FIREBASE_CONFIG_JSON:
        try:
            # –ü–∞—Ä—Å–∏–º JSON-—Å—Ç—Ä–æ–∫—É
            config = json.loads(FIREBASE_CONFIG_JSON)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if 'private_key' in config and 'client_email' in config:
                cred = credentials.Certificate(config)
                firebase_admin.initialize_app(cred, name=APP_ID)
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–Ω–æ Admin SDK –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å–µ—Ä–≤–∏—Å–Ω—ã–º –∫–ª—é—á–æ–º)
                firebase_admin.initialize_app(options=config, name=APP_ID)

            db = firestore.client()
            firebase_initialized = True
            logger.info("–ö–ª–∏–µ–Ω—Ç Firestore —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            return True
        except json.JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ FIREBASE_CONFIG_JSON. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è JSON —Å—Ç—Ä–æ–∫–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase/Firestore: {e}")
    else:
        logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è FIREBASE_CONFIG_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    return False

initialize_firebase()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (Dummy/Placeholder) ---
def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é."""
    return ReplyKeyboardMarkup(
        [[SURVEY_BTN], [ILLNESS_BTN, INFO_BTN], [EMERGENCY_BTN]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user = update.effective_user
    await update.message.reply_html(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –û–Ω–ª–∞–π–Ω-–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫—É –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ—Å—Ç–∏–Ω—Å—É–ª—å—Ç–Ω—ã–º —Ç–∞–ª–∞–º–∏—á–µ—Å–∫–∏–º —Å–∏–Ω–¥—Ä–æ–º–æ–º. –Ø ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.",
        reply_markup=get_main_menu_keyboard(),
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –¥–∏–∞–ª–æ–≥–∞."""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard(),
    )
    return ConversationHandler.END

# --- –§–£–ù–ö–¶–ò–ò –î–ò–ê–õ–û–ì–ê (Placeholder) ---
async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ - –í–æ–ø—Ä–æ—Å 1: –û—Ü–µ–Ω–∫–∞ –±–æ–ª–∏."""
    context.user_data['survey'] = {'user_id': str(update.effective_user.id), 'date': datetime.datetime.now().isoformat()}
    
    await update.message.reply_text(
        "**–ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫.**\n\n**–í–æ–ø—Ä–æ—Å 1/5:** –û—Ü–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –±–æ–ª–µ–≤–æ–π —Å–∏–Ω–¥—Ä–æ–º –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 (–Ω–µ—Ç –±–æ–ª–∏) –¥–æ 10 (—Å–∞–º–∞—è —Å–∏–ª—å–Ω–∞—è –±–æ–ª—å).",
        reply_markup=ReplyKeyboardMarkup([['0', '1', '2', '3'], ['4', '5', '6', '7'], ['8', '9', '10'], [CANCEL_BTN]], one_time_keyboard=True, resize_keyboard=True)
    )
    return Q1_PAIN

async def q1_pain(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–ø—Ä–æ—Å 2: –°–æ–Ω."""
    try:
        pain_score = int(update.message.text)
        if not 0 <= pain_score <= 10:
             await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")
             return Q1_PAIN
        context.user_data['survey']['pain_score'] = pain_score
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª–∏ (0-10).")
        return Q1_PAIN

    await update.message.reply_text(
        "**–í–æ–ø—Ä–æ—Å 2/5:** –ö–∞–∫ –í—ã —Å–ø–∞–ª–∏ –ø—Ä–æ—à–ª–æ–π –Ω–æ—á—å—é? (–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç)",
        reply_markup=ReplyKeyboardMarkup([['–û—Ç–ª–∏—á–Ω–æ', '–•–æ—Ä–æ—à–æ'], ['–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', '–ü–ª–æ—Ö–æ'], ['–°–æ–≤—Å–µ–º –Ω–µ —Å–ø–∞–ª'], [CANCEL_BTN]], one_time_keyboard=True, resize_keyboard=True)
    )
    return Q2_SLEEP

async def q2_sleep(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–ø—Ä–æ—Å 3: –õ–µ–∫–∞—Ä—Å—Ç–≤–∞."""
    context.user_data['survey']['sleep_quality'] = update.message.text
    
    await update.message.reply_text(
        "**–í–æ–ø—Ä–æ—Å 3/5:** –ö–∞–∫–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –í—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è? (–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π')",
        reply_markup=ReplyKeyboardMarkup([['–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'], [CANCEL_BTN]], one_time_keyboard=True, resize_keyboard=True)
    )
    return Q3_MEDICATION

async def q3_medication(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–ø—Ä–æ—Å 4: –ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã."""
    context.user_data['survey']['medication'] = update.message.text
    
    await update.message.reply_text(
        "**–í–æ–ø—Ä–æ—Å 4/5:** –û—Ç–º–µ—Ç–∏–ª–∏ –ª–∏ –í—ã —Å–µ–≥–æ–¥–Ω—è –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–ª–∏ –Ω–æ–≤—ã–µ —Å–∏–º–ø—Ç–æ–º—ã? (–û–ø–∏—à–∏—Ç–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ '–ù–µ—Ç')",
        reply_markup=ReplyKeyboardMarkup([['–ù–µ—Ç'], [CANCEL_BTN]], one_time_keyboard=True, resize_keyboard=True)
    )
    return Q4_SIDE_EFFECTS

async def q4_side_effects(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–ø—Ä–æ—Å 5: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏."""
    context.user_data['survey']['side_effects'] = update.message.text
    
    await update.message.reply_text(
        "**–í–æ–ø—Ä–æ—Å 5/5:** –í–∞—à–∏ –æ–±—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤—Ä–∞—á—É.",
        reply_markup=ReplyKeyboardMarkup([[CANCEL_BTN]], one_time_keyboard=True, resize_keyboard=True)
    )
    return Q5_COMMENTS

async def q5_comments_and_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞."""
    context.user_data['survey']['comments'] = update.message.text
    survey_data = context.user_data['survey']

    save_status = "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    if firebase_initialized and db:
        try:
            # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: /artifacts/{APP_ID}/users/{user_id}/daily_surveys
            doc_ref = db.collection(f"artifacts/{APP_ID}/users/{survey_data['user_id']}/daily_surveys").document()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            await asyncio.to_thread(doc_ref.set, survey_data)
            save_status = "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firestore."
        except Exception as e:
            save_status = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Firestore: {e}"
            logger.error(save_status)
    else:
        save_status = "Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ."
        logger.warning(save_status)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    report = f"**–°–ø–∞—Å–∏–±–æ! –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω.**\n\n"
    report += f"**–ë–æ–ª–µ–≤–æ–π —Å–∏–Ω–¥—Ä–æ–º:** {survey_data.get('pain_score', 'N/A')}/10\n"
    report += f"**–°–æ–Ω:** {survey_data.get('sleep_quality', 'N/A')}\n"
    report += f"**–õ–µ–∫–∞—Ä—Å—Ç–≤–∞:** {survey_data.get('medication', 'N/A')}\n"
    report += f"**–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:** {survey_data.get('side_effects', 'N/A')}\n"
    report += f"**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:** {survey_data.get('comments', 'N/A')}\n\n"
    report += f"_{save_status}_"
    
    await update.message.reply_text(report, reply_markup=get_main_menu_keyboard())
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞
    del context.user_data['survey']
    return ConversationHandler.END

# --- –§–£–ù–ö–¶–ò–ò –ö–ù–û–ü–û–ö-–ö–û–ú–ê–ù–î (Placeholder) ---
async def show_illness_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∏–Ω—Å—É–ª—å—Ç–Ω–æ–º —Ç–∞–ª–∞–º–∏—á–µ—Å–∫–æ–º —Å–∏–Ω–¥—Ä–æ–º–µ."""
    info_text = (
        "**–ü–æ—Å—Ç–∏–Ω—Å—É–ª—å—Ç–Ω—ã–π —Ç–∞–ª–∞–º–∏—á–µ—Å–∫–∏–π —Å–∏–Ω–¥—Ä–æ–º (–ü–¢–°)**\n\n"
        "–≠—Ç–æ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–µ –±–æ–ª–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø–æ—Å–ª–µ –∏–Ω—Å—É–ª—å—Ç–∞, "
        "–ø–æ–≤—Ä–µ–¥–∏–≤—à–µ–≥–æ —Ç–∞–ª–∞–º—É—Å. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è —É–ø–æ—Ä–Ω–æ–π, —á–∞—Å—Ç–æ –∂–≥—É—á–µ–π –±–æ–ª—å—é, "
        "–∫–æ—Ç–æ—Ä–∞—è –ø–ª–æ—Ö–æ –ø–æ–¥–¥–∞–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–º.\n\n"
        "**–ö–ª—é—á–µ–≤—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:** –∞–ª–ª–æ–¥–∏–Ω–∏—è (–±–æ–ª—å –æ—Ç –Ω–µ –±–æ–ª–µ–≤—ã—Ö —Å—Ç–∏–º—É–ª–æ–≤), –≥–∏–ø–µ—Ä–∞–ª–≥–µ–∑–∏—è, "
        "–∏–Ω–æ–≥–¥–∞ –¥–∏–∑–µ—Å—Ç–µ–∑–∏—è. –¢–µ—á–µ–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º."
    )
    await update.message.reply_text(info_text, reply_markup=get_main_menu_keyboard())

async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    info_text = (
        "**–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –û–Ω–ª–∞–π–Ω-–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏:**\n"
        "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω **–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ**.\n"
        "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–æ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è **–µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 8:00 –¥–æ 17:00 (–ú–°–ö)**.\n\n"
        "**–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:**\n"
        "–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏—Ö —Å—Ä–æ—á–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –æ–ø—Ä–æ—Å–Ω–∏–∫–µ. "
        "–í—Ä–∞—á —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —á–∞—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.\n"
        "–î–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üö® **–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å**."
    )
    await update.message.reply_text(info_text, reply_markup=get_main_menu_keyboard())

async def show_emergency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –≤ —Å–ª—É—á–∞–µ —Å—Ä–æ—á–Ω–æ–π –ø–æ–º–æ—â–∏."""
    emergency_text = (
        "**üö® –°–†–û–ß–ù–ê–Ø –ú–ï–î–ò–¶–ò–ù–°–ö–ê–Ø –ü–û–ú–û–©–¨!**\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –∏–ª–∏ –≤–∞—à–µ–≥–æ –±–ª–∏–∑–∫–æ–≥–æ:\n"
        "1. –í–Ω–µ–∑–∞–ø–Ω–æ —É—Ö—É–¥—à–∏–ª–æ—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–æ–≤—ã–π –∏–Ω—Å—É–ª—å—Ç, –ø–æ—Ç–µ—Ä—è —Å–æ–∑–Ω–∞–Ω–∏—è).\n"
        "2. –í–æ–∑–Ω–∏–∫–ª–∏ –∂–∏–∑–Ω–µ—É–≥—Ä–æ–∂–∞—é—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã (–∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–µ –¥—ã—Ö–∞–Ω–∏—è, –æ—Å—Ç—Ä–∞—è –±–æ–ª—å –≤ –≥—Ä—É–¥–∏).\n"
        "3. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤.\n\n"
        "**–ù–ï–ú–ï–î–õ–ï–ù–ù–û –∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É —Å–∫–æ—Ä–æ–π –ø–æ–º–æ—â–∏:**\n"
        "**103** (–†–æ—Å—Å–∏—è) –∏–ª–∏ **112** (–ï–¥–∏–Ω—ã–π –Ω–æ–º–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±).\n\n"
        "–û–Ω–ª–∞–π–Ω-–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –ø–æ–º–æ—â—å."
    )
    await update.message.reply_text(emergency_text, reply_markup=get_main_menu_keyboard())

# --- –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ---
def setup_handlers(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    async def cancel_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        return await cancel(update, context)

    # 1. –î–∏–∞–ª–æ–≥ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
    survey_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(f"^{SURVEY_BTN}$"), start_survey)],
        states={
            Q1_PAIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, q1_pain)],
            Q2_SLEEP: [MessageHandler(filters.TEXT & ~filters.COMMAND, q2_sleep)],
            Q3_MEDICATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, q3_medication)],
            Q4_SIDE_EFFECTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, q4_side_effects)],
            Q5_COMMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, q5_comments_and_save)],
        },
        fallbacks=[MessageHandler(filters.Regex(f"^{CANCEL_BTN}$"), cancel_button_handler)],
    )

    # 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(survey_conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫-–∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.Regex(f"^{ILLNESS_BTN}$"), show_illness_info))
    application.add_handler(MessageHandler(filters.Regex(f"^{INFO_BTN}$"), show_info))
    application.add_handler(MessageHandler(filters.Regex(f"^{EMERGENCY_BTN}$"), show_emergency))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç)
    async def other_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{SURVEY_BTN}|{ILLNESS_BTN}|{INFO_BTN}|{EMERGENCY_BTN}|{CANCEL_BTN}$"), other_text))


# --- –ì–õ–ê–í–ù–ê–Ø –¢–û–ß–ö–ê –í–•–û–î–ê ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    WEBHOOK_URL_HOST = RENDER_EXTERNAL_HOSTNAME 
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
    if TELEGRAM_TOKEN == "FAKE_TOKEN" or not WEBHOOK_URL_HOST:
        logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –∏–ª–∏ RENDER_EXTERNAL_HOSTNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –Ω–∞ Render –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å.")
        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –Ω–µ—Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω
        return

    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram Bot...")
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    setup_handlers(application)
    logger.info("Application handlers set up successfully.")

    # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è Webhook (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://my-bot.onrender.com/TOKEN_SECRET)
    WEBHOOK_URL = f"{WEBHOOK_URL_HOST}/{TELEGRAM_TOKEN}"

    logger.info(f"–ó–∞–ø—É—Å–∫ Webhook –Ω–∞ –ø–æ—Ä—Ç—É {WEBHOOK_PORT} —Å URL: https://{WEBHOOK_URL}")
    application.run_webhook(
        listen="0.0.0.0",
        port=WEBHOOK_PORT,
        url_path=TELEGRAM_TOKEN, # –ü—É—Ç—å –≤ –Ω–∞—à–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–æ–≤
        webhook_url=f"https://{WEBHOOK_URL}", # –ü–æ–ª–Ω—ã–π URL, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–æ–æ–±—â–∞–µ–º Telegram
    )

if __name__ == "__main__":
    main()
