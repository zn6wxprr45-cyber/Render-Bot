# -*- coding: utf-8 -*-
"""–¢–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç "–û–Ω–ª–∞–π–Ω-–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TFvTZHtisPGNZARKMJngxCZ7u4rw7Cd1
"""

# -*- coding: utf-8 -*-

"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞ "–û–Ω–ª–∞–π–Ω-–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞"
–¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ—Å—Ç–∏–Ω—Å—É–ª—å—Ç–Ω—ã–º —Ç–∞–ª–∞–º–∏—á–µ—Å–∫–∏–º —Å–∏–Ω–¥—Ä–æ–º–æ–º.

–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç python-telegram-bot –∏ Firebase Firestore.
"""

import logging
import os
import json
import datetime
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import firebase_admin
from firebase_admin import credentials, firestore, auth

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –¥–ª—è Render
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
# FIREBASE_CONFIG_JSON - —Å–æ–¥–µ—Ä–∂–∏—Ç JSON –∫–ª—é—á–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
FIREBASE_CONFIG_JSON = os.getenv("FIREBASE_CONFIG_JSON")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Webhook
PORT = int(os.environ.get("PORT", "10000"))
WEBHOOK_PATH = TELEGRAM_TOKEN or "secret-path"
WEBHOOK_URL = f"{RENDER_EXTERNAL_HOSTNAME}/{WEBHOOK_PATH}" if RENDER_EXTERNAL_HOSTNAME else None

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–æ—Ç–∞
(
    Q1_PAIN,
    Q2_SLEEP,
    Q3_MEDICATION,
    Q4_SIDE_EFFECTS,
    Q5_COMMENTS,
    FEEDBACK
) = range(6)

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SURVEY_BTN = "üìä –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å"
FEEDBACK_BTN = "‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
ILLNESS_BTN = "üß† –û —Å–∏–Ω–¥—Ä–æ–º–µ"
INFO_BTN = "‚ùì –ü–æ–º–æ—â—å"
EMERGENCY_BTN = "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤"
CANCEL_BTN = "‚ùå –û—Ç–º–µ–Ω–∞"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase ---

db = None
firebase_app_id = "default-app-id" # –ó–∞–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ

def init_firebase():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Firebase Admin SDK."""
    global db
    global firebase_app_id

    if FIREBASE_CONFIG_JSON:
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ JSON-—Å—Ç—Ä–æ–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
            cred_json = json.loads(FIREBASE_CONFIG_JSON)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ project_id –∏–∑ –∫–ª—é—á–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ appId
            firebase_app_id = cred_json.get("project_id", "default-app-id")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            cred = credentials.Certificate(cred_json)
            firebase_admin.initialize_app(cred)
            db = firestore.client()
            logger.info(f"‚úÖ Firebase Admin SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (Project: {firebase_app_id}).")
            
        except json.JSONDecodeError:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase/Firestore: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ FIREBASE_CONFIG_JSON.")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {e}")
    else:
        logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è FIREBASE_CONFIG_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ (–µ—Å–ª–∏ –±—ã —ç—Ç–æ –Ω–µ –±—ã–ª —Ä–µ–∞–ª—å–Ω—ã–π –±–æ—Ç).")

# --- –£—Ç–∏–ª–∏—Ç—ã Firebase (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ) ---

def get_user_doc_ref(user_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º project_id –∫–∞–∫ appId
    return db.collection(f"artifacts/{firebase_app_id}/users/{user_id}/profile").document("info")

def get_survey_collection_ref(user_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é –æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return db.collection(f"artifacts/{firebase_app_id}/users/{user_id}/surveys")

def get_feedback_collection_ref(user_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return db.collection(f"artifacts/{firebase_app_id}/users/{user_id}/feedback")

async def save_user_profile(user_data: dict, user_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore."""
    if db is None:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: DB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    try:
        doc_ref = get_user_doc_ref(str(user_id))
        await asyncio.to_thread(doc_ref.set, user_data, merge=True)
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def save_survey_results(user_id: int, results: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –≤ Firestore."""
    if db is None:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–æ—Å: DB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
        results["timestamp"] = datetime.datetime.now(datetime.timezone.utc)
        results["user_id"] = str(user_id)
        
        collection_ref = get_survey_collection_ref(str(user_id))
        await asyncio.to_thread(collection_ref.add, results)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def save_feedback(user_id: int, text: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ Firestore."""
    if db is None:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å: DB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    try:
        data = {
            "text": text,
            "timestamp": datetime.datetime.now(datetime.timezone.utc),
            "user_id": str(user_id)
        }
        collection_ref = get_feedback_collection_ref(str(user_id))
        await asyncio.to_thread(collection_ref.add, data)
        logger.info(f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# --- –§—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –º–µ–Ω—é ---

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    keyboard = [
        [SURVEY_BTN, FEEDBACK_BTN],
        [ILLNESS_BTN, INFO_BTN],
        [KeyboardButton(EMERGENCY_BTN)],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_cancel_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã."""
    return ReplyKeyboardMarkup([[CANCEL_BTN]], resize_keyboard=True, one_time_keyboard=True)

# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (Handlers) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data = {
        "first_name": user.first_name,
        "last_name": user.last_name,
        "username": user.username,
        "language_code": user.language_code,
        "chat_id": update.effective_chat.id,
        "last_login": datetime.datetime.now(datetime.timezone.utc)
    }
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
    asyncio.create_task(save_user_profile(user_data, user.id))

    await update.message.reply_html(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.mention_html()}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ \"–û–Ω–ª–∞–π–Ω-–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏\", —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ—Å—Ç–∏–Ω—Å—É–ª—å—Ç–Ω—ã–º —Ç–∞–ª–∞–º–∏—á–µ—Å–∫–∏–º —Å–∏–Ω–¥—Ä–æ–º–æ–º. "
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–≥–æ –≤—Ä–∞—á–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=get_main_menu_keyboard(),
    )

async def show_illness_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–Ω–¥—Ä–æ–º–µ."""
    info_text = (
        "üß† **–ü–æ—Å—Ç–∏–Ω—Å—É–ª—å—Ç–Ω—ã–π —Ç–∞–ª–∞–º–∏—á–µ—Å–∫–∏–π —Å–∏–Ω–¥—Ä–æ–º (—Å–∏–Ω–¥—Ä–æ–º –î–µ–∂–µ—Ä–∏–Ω-–†—É—Å—Å–∏)**\n\n"
        "–≠—Ç–æ –∫–æ–º–ø–ª–µ–∫—Å –Ω–µ–≤—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏—Ö –ø–æ—Å–ª–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–∞–ª–∞–º—É—Å–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–Ω—Å—É–ª—å—Ç–∞. "
        "–ï–≥–æ –≥–ª–∞–≤–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ–π —è–≤–ª—è–µ—Ç—Å—è **—Ç–∞–ª–∞–º–∏—á–µ—Å–∫–∞—è –±–æ–ª—å** ‚Äî —Å–∏–ª—å–Ω–∞—è, —á–∞—Å—Ç–æ –∂–≥—É—á–∞—è, —Ç—Ä—É–¥–Ω–æ –ø–æ–¥–¥–∞—é—â–∞—è—Å—è –ª–µ—á–µ–Ω–∏—é –±–æ–ª—å. "
        "–°–∏–º–ø—Ç–æ–º—ã –º–æ–≥—É—Ç —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–∞—Ç—å –æ–Ω–µ–º–µ–Ω–∏–µ, –ø–æ–≤—ã—à–µ–Ω–Ω—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—è–º (–∞–ª–ª–æ–¥–∏–Ω–∏—è), "
        "–Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–Ω–∞, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è.\n\n"
        "**–¶–µ–ª—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞** ‚Äî –ø–æ–º–æ—á—å –≤–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç—Ç–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤, —á—Ç–æ–±—ã –≤–∞—à –≤—Ä–∞—á –º–æ–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ä–∞–ø–∏—é."
    )
    await update.message.reply_text(info_text, reply_markup=get_main_menu_keyboard(), parse_mode="Markdown")

async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞."""
    info_text = (
        "‚ùì **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º**\n\n"
        "1. **üìä –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å:** –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ 5 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –±–æ–ª–∏, —Å–Ω–µ –∏ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤. "
        "–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—Å—Ç–∏ —Ç–æ—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É Firestore.\n"
        "2. **‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –≤—Ä–∞—á–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
        "3. **üß† –û —Å–∏–Ω–¥—Ä–æ–º–µ:** –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –≤–∞—à–µ–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–∏.\n"
        "4. **üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤:** –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–æ—Ç–ª–æ–∂–Ω–æ–π –ø–æ–º–æ—â–∏.\n\n"
        "**–í–Ω–∏–º–∞–Ω–∏–µ:** –≠—Ç–æ—Ç –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–º–µ–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∏–ª–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ. –í—Å–µ–≥–¥–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º!"
    )
    await update.message.reply_text(info_text, reply_markup=get_main_menu_keyboard(), parse_mode="Markdown")

async def show_emergency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤."""
    emergency_text = (
        "üö® **–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–û–ú–û–©–¨**\n\n"
        "–ï—Å–ª–∏ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Ä–µ–∑–∫–æ–µ —É—Ö—É–¥—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –∏–ª–∏ –≤—ã–∑–æ–≤–∏—Ç–µ —Å–∫–æ—Ä—É—é –ø–æ–º–æ—â—å!\n\n"
        "üìû **–ï–¥–∏–Ω—ã–π –Ω–æ–º–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–± (–†–æ—Å—Å–∏—è):** `112`\n"
        "üìû **–í–∞—à –ª–µ—á–∞—â–∏–π –≤—Ä–∞—á/–∫–ª–∏–Ω–∏–∫–∞:** [–ú–µ—Å—Ç–æ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤–∞—à–µ–≥–æ –≤—Ä–∞—á–∞ –∏–ª–∏ –∫–ª–∏–Ω–∏–∫–∏]\n\n"
        "**–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –≠–¢–û–¢ –ë–û–¢ –î–õ–Ø –≠–ö–°–¢–†–ï–ù–ù–´–• –°–õ–£–ß–ê–ï–í.**"
    )
    await update.message.reply_text(emergency_text, reply_markup=get_main_menu_keyboard(), parse_mode="Markdown")

# --- –î–∏–∞–ª–æ–≥ –û–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ---

async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –≤—Ä–∞—á—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ \"‚ùå –û—Ç–º–µ–Ω–∞\".",
        reply_markup=get_cancel_keyboard()
    )
    return FEEDBACK

async def feedback_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    text = update.message.text
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    asyncio.create_task(save_feedback(user_id, text))
    
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ. –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END

# --- –î–∏–∞–ª–æ–≥ –û–ø—Ä–æ—Å–∞ (Survey) ---

async def survey_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –æ–ø—Ä–æ—Å–∞. –í–æ–ø—Ä–æ—Å 1: –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –±–æ–ª–∏."""
    context.user_data["survey_data"] = {}
    
    keyboard = [[KeyboardButton(str(i)) for i in range(0, 6)],
                [KeyboardButton(str(i)) for i in range(6, 11)]]
    
    await update.message.reply_text(
        "**üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å**\n\n"
        "**–í–æ–ø—Ä–æ—Å 1/5:** –û—Ü–µ–Ω–∏—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤–∞—à–µ–π —Ç–∞–ª–∞–º–∏—á–µ—Å–∫–æ–π –±–æ–ª–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 (–Ω–µ—Ç –±–æ–ª–∏) –¥–æ 10 (—Å–∞–º–∞—è —Å–∏–ª—å–Ω–∞—è –±–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã –º–æ–∂–µ—Ç–µ —Å–µ–±–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å).",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode="Markdown"
    )
    return Q1_PAIN

async def q1_pain(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–ø—Ä–æ—Å 2: –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞."""
    try:
        pain_score = int(update.message.text)
        if not 0 <= pain_score <= 10:
            raise ValueError
        context.user_data["survey_data"]["pain_score"] = pain_score
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")
        return Q1_PAIN

    keyboard = [["–û—Ç–ª–∏—á–Ω–æ", "–•–æ—Ä–æ—à–æ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"], ["–ü–ª–æ—Ö–æ", "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ"]]
    
    await update.message.reply_text(
        "**–í–æ–ø—Ä–æ—Å 2/5:** –ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–≥–æ —Å–Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–æ—á—å—é?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return Q2_SLEEP

async def q2_sleep(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–ø—Ä–æ—Å 3: –ü—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤."""
    sleep_quality = update.message.text
    if sleep_quality not in ["–û—Ç–ª–∏—á–Ω–æ", "–•–æ—Ä–æ—à–æ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", "–ü–ª–æ—Ö–æ", "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ"]:
         await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞.")
         return Q2_SLEEP

    context.user_data["survey_data"]["sleep_quality"] = sleep_quality
    
    keyboard = [["–î–∞", "–ù–µ—Ç"]]
    
    await update.message.reply_text(
        "**–í–æ–ø—Ä–æ—Å 3/5:** –ü—Ä–∏–Ω–∏–º–∞–ª–∏ –ª–∏ –≤—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–µ –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω—Ç–∏–∫–æ–Ω–≤—É–ª—å—Å–∞–Ω—Ç—ã –∏–ª–∏ –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç—ã)?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return Q3_MEDICATION

async def q3_medication(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–ø—Ä–æ—Å 4: –ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã."""
    medication_taken = update.message.text
    if medication_taken not in ["–î–∞", "–ù–µ—Ç"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        return Q3_MEDICATION

    context.user_data["survey_data"]["medication_taken"] = medication_taken
    
    await update.message.reply_text(
        "**–í–æ–ø—Ä–æ—Å 4/5:** –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –∏–º–µ—é—Ç—Å—è) –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è. "
        "–ï—Å–ª–∏ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç'.",
        reply_markup=get_cancel_keyboard()
    )
    return Q4_SIDE_EFFECTS

async def q4_side_effects(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–ø—Ä–æ—Å 5: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏."""
    side_effects = update.message.text
    context.user_data["survey_data"]["side_effects"] = side_effects
    
    await update.message.reply_text(
        "**–í–æ–ø—Ä–æ—Å 5/5:** –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥—Ä—É–≥–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –≤–∞—à–µ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏ —Å–µ–≥–æ–¥–Ω—è? (–ù–∞–ø—Ä–∏–º–µ—Ä, –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Å—Ç—Ä–µ—Å—Å–µ). "
        "–ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç'.",
        reply_markup=get_cancel_keyboard()
    )
    return Q5_COMMENTS

async def q5_comments_and_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    comments = update.message.text
    context.user_data["survey_data"]["comments"] = comments
    user_id = update.effective_user.id
    results = context.user_data["survey_data"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞
    asyncio.create_task(save_survey_results(user_id, results))
    
    await update.message.reply_text(
        "‚úÖ **–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤–∞—à–∏–º –≤—Ä–∞—á–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏ –≤ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    context.user_data.pop("survey_data", None)
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã ---

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END

async def cancel_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '‚ùå –û—Ç–º–µ–Ω–∞'."""
    if update.message.text == CANCEL_BTN:
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END
    return ConversationHandler.END # –ï—Å–ª–∏ –Ω–µ "–û—Ç–º–µ–Ω–∞", —Ç–æ —ç—Ç–æ fallbacks, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥.

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Webhook."""
    
    # 0. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    if not TELEGRAM_TOKEN or not RENDER_EXTERNAL_HOSTNAME:
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –∏–ª–∏ RENDER_EXTERNAL_HOSTNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –Ω–∞ Render –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å.")
        return # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase/Firestore
    init_firebase()
    
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram Bot...")
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ Application
    # URL –¥–ª—è Webhook –±—É–¥–µ—Ç –ø–æ–ª–Ω—ã–º URL, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–æ–æ–±—â–∞–µ–º Telegram
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
    
    # –î–∏–∞–ª–æ–≥ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    feedback_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(f"^{FEEDBACK_BTN}$"), feedback_start)],
        states={
            FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{CANCEL_BTN}$"), feedback_process)],
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex(f"^{CANCEL_BTN}$"), cancel)],
    )

    # –î–∏–∞–ª–æ–≥ –æ–ø—Ä–æ—Å–∞
    survey_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(f"^{SURVEY_BTN}$"), survey_start)],
        states={
            Q1_PAIN: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{CANCEL_BTN}$"), q1_pain)],
            Q2_SLEEP: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{CANCEL_BTN}$"), q2_sleep)],
            Q3_MEDICATION: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{CANCEL_BTN}$"), q3_medication)],
            Q4_SIDE_EFFECTS: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{CANCEL_BTN}$"), q4_side_effects)],
            Q5_COMMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{CANCEL_BTN}$"), q5_comments_and_save)],
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex(f"^{CANCEL_BTN}$"), cancel)],
    )

    # 4. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥–∏
    application.add_handler(survey_conv_handler)
    application.add_handler(feedback_conv_handler)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫-–∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.Regex(f"^{ILLNESS_BTN}$"), show_illness_info))
    application.add_handler(MessageHandler(filters.Regex(f"^{INFO_BTN}$"), show_info))
    application.add_handler(MessageHandler(filters.Regex(f"^{EMERGENCY_BTN}$"), show_emergency))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç)
    async def other_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^{SURVEY_BTN}$") & ~filters.Regex(f"^{FEEDBACK_BTN}$") & ~filters.Regex(f"^{ILLNESS_BTN}$") & ~filters.Regex(f"^{INFO_BTN}$") & ~filters.Regex(f"^{EMERGENCY_BTN}$"), other_text))


    logger.info("Application handlers set up successfully.")
    
    # 5. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Webhook
    logger.info(f"–ó–∞–ø—É—Å–∫ Webhook –Ω–∞ –ø–æ—Ä—Ç—É {PORT} —Å URL: https://{WEBHOOK_URL}")
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_PATH,
        webhook_url=f"https://{WEBHOOK_URL}", # –ü–æ–ª–Ω—ã–π URL, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–æ–æ–±—â–∞–µ–º Telegram
    )

if __name__ == "__main__":
    main()
